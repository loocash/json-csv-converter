{"version":3,"sources":["components/Editor.js","lib/json2csv.js","lib/csv2json.js","components/Converter.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","mode","onChange","value","className","fontSize","theme","name","editorProps","$blockScrolling","width","wrapEnabled","getHeader","obj","Object","keys","join","getBody","header","split","map","key","Error","search","replace","quote","dequote","xs","test","slice","length","getRecord","record","values","trim","_","zipObject","result","merging","k","forEach","ch","filter","x","normalizeValues","Converter","initialJson","initialCsv","useState","json","setJson","csv","setCsv","useEffect","handleJsonChange","handleCsvChange","newJson","JSON","parse","isValidJson","body","parsedJson","Array","isArray","entity","json2csv","newCsv","lines","stringify","line","push","csv2json","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.070d029e.chunk.js","sourcesContent":["import React from \"react\";\nimport AceEditor from \"react-ace\";\n\nexport const Editor = ({ mode, onChange, value }) => (\n  <AceEditor\n    value={value}\n    className=\"Editor\"\n    fontSize={16}\n    mode={mode}\n    theme=\"monokai\"\n    onChange={onChange}\n    name={`${mode}_editor`}\n    editorProps={{ $blockScrolling: true }}\n    width=\"800px\"\n    wrapEnabled={true}\n  />\n);\n","const getHeader = (obj) => (obj ? Object.keys(obj).join(\",\") : \"\");\n\nconst quote = (value) => {\n  if (typeof value === \"object\") {\n    throw new Error(\"Nested JSON cannot be converted to csv\");\n  }\n\n  if (typeof value !== \"string\" || value.search(/[,|\"|\\n]/) === -1) {\n    return value;\n  }\n\n  return `\"${value.replace(/\"/g, `\"\"`)}\"`;\n};\n\nconst getBody = (obj, header) =>\n  header\n    .split(\",\")\n    .map((key) => quote(obj[key]))\n    .join(\",\");\n\n/**\n * Converts a JSON string into a CSV string\n * @param {String} json - input JSON\n */\nexport default function json2csv(json) {\n  if (!json || typeof json !== \"string\") {\n    return \"\";\n  }\n\n  const parsedJson = JSON.parse(json);\n\n  let header, body;\n\n  if (Array.isArray(parsedJson)) {\n    header = getHeader(parsedJson[0]);\n    body = parsedJson.map((entity) => getBody(entity, header)).join(\"\\n\");\n  } else {\n    header = getHeader(parsedJson);\n    body = getBody(parsedJson, header);\n  }\n\n  return `${header}\\n${body}`.trim();\n}\n\nexport const isValidJson = (json) => {\n  try {\n    JSON.parse(json);\n  } catch {\n    return false;\n  }\n  return true;\n};\n","import _ from \"lodash\";\n\nconst countChars = (xs, ch) => xs.split(\"\").filter((x) => x === ch).length;\n\nconst dequote = (xs) => {\n  if (/^\".*\"$/.test(xs)) {\n    xs = xs.slice(1, xs.length - 1);\n  }\n  return xs.replace(/\"\"/g, '\"');\n};\n\nexport const normalizeValues = (values) => {\n  const result = [];\n  let merging = false;\n  let k = 0;\n  values.forEach((value) => {\n    if (!merging) {\n      result[k++] = value;\n    } else {\n      result[k - 1] += \",\" + value;\n    }\n    if (countChars(value, '\"') % 2 === 1) {\n      merging = !merging;\n    }\n  });\n  return result.map(dequote);\n};\n\nconst getRecord = (header, record) => {\n  let values = record.trim().split(\",\");\n\n  return _.zipObject(header, normalizeValues(values));\n};\n\n/**\n * Converts a CSV string into a JSON string\n * @param {String} csv - input CSV\n */\nexport default function csv2json(csv) {\n  if (!csv || typeof csv !== \"string\") {\n    return \"\";\n  }\n\n  const lines = csv.trim().split(\"\\n\");\n\n  if (lines.length < 2) {\n    return \"\";\n  }\n\n  const header = lines[0].trim().split(\",\");\n\n  if (lines.length === 2) {\n    const obj = getRecord(header, lines[1]);\n\n    return JSON.stringify(obj);\n  }\n\n  // lines.length > 2\n\n  const obj = [];\n  lines.slice(1).forEach((line) => {\n    const record = getRecord(header, line);\n    obj.push(record);\n  });\n\n  return JSON.stringify(obj);\n}\n\nexport const isValidCsv = (csv) => true;\n","import React, { useState, useEffect } from \"react\";\nimport { Editor } from \"./Editor\";\n\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\n\nimport json2csv, { isValidJson } from \"../lib/json2csv\";\nimport csv2json, { isValidCsv } from \"../lib/csv2json\";\n\nexport const Converter = ({ initialJson = \"\", initialCsv = \"\" }) => {\n  const [json, setJson] = useState(initialJson);\n  const [csv, setCsv] = useState(initialCsv);\n\n  useEffect(() => {\n    if (initialJson) {\n      handleJsonChange(initialJson);\n    }\n    if (initialCsv) {\n      handleCsvChange(initialJson);\n    }\n  }, [initialJson, initialCsv]);\n\n  const handleJsonChange = (newJson) => {\n    setJson(newJson);\n    if (isValidJson(newJson)) {\n      setCsv(json2csv(newJson));\n    }\n  };\n\n  const handleCsvChange = (newCsv) => {\n    setCsv(newCsv);\n    if (isValidCsv(newCsv)) {\n      setJson(csv2json(newCsv));\n    }\n  };\n\n  return (\n    <div className=\"Converter\">\n      <div>\n        <h3>JSON</h3>\n        <Editor mode=\"json\" onChange={handleJsonChange} value={json} />\n      </div>\n      <div>\n        <h3>CSV</h3>\n        <Editor mode=\"text\" onChange={handleCsvChange} value={csv} />\n      </div>\n    </div>\n  );\n};\n","import { Converter } from \"./components/Converter\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>JSON â¥Š CSV Converter</h2>\n      <Converter\n        initialJson={`[{\"Year\":\"1997\",\"Make\":\"Ford\",\"Model\":\"E350\"},\n{\"Year\":\"2000\",\"Make\":\"Mercury\",\"Model\":\"Cougar\"}]`}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}